{"version":3,"sources":["serviceWorker.js","index.js","lib/json-parser.js","pages/home.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","hydrate","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","jsonlint","require","beautify","jsonMarkup","escape","JSONParser","parseAndBeautify","json","parsed","parse","success","rawOutput","htmlOutput","e","isValidJSON","Home","global","localStorage","LocalStorage","state","input_text","output_text","hljs","registerLanguage","getItem","parseJSON","event","target","value","this","setState","length","onInit","parseData","setItem","highlight","copy","toast","hideProgressBar","className","placeholder","onChange","handleInputChange","onClick","setClipboard","suppressContentEditableWarning","contentEditable","Component"],"mappings":"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","file":"static/js/main.c102b0e0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Home from \"./pages/home\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./css/tailwind.generated.css\";\n\nReactDOM.hydrate(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","var jsonlint = require(\"jsonlint-mod\");\r\nvar beautify = require(\"json-beautify\");\r\nvar jsonMarkup = require('json-markup')\r\nvar escape = require('escape-html');\r\n\r\n\r\nvar JSONParser = {\r\n    parseAndBeautify: function(json) {\r\n        try {\r\n            let parsed = jsonlint.parse(json);\r\n            return {\r\n                success: true,\r\n                rawOutput: beautify(parsed, null, 3),\r\n                htmlOutput: jsonMarkup(parsed)\r\n            }\r\n        } catch(e) {\r\n            return {\r\n                success: false,\r\n                rawOutput: e.message,\r\n                htmlOutput: escape(e.message)\r\n            }\r\n        }\r\n    },\r\n\r\n    isValidJSON: function(json) {\r\n        try {\r\n            jsonlint.parse(json);\r\n            return true;\r\n        } catch(e) {\r\n        }\r\n        return false;\r\n    }\r\n};\r\n\r\nexport default JSONParser;","import React, { Component } from \"react\";\r\nimport JSONParser from \"../lib/json-parser\";\r\nimport parse from \"html-react-parser\";\r\nimport hljs from \"highlight.js/lib/core\";\r\nimport copy from \"copy-to-clipboard\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport { LocalStorage } from \"node-localstorage\";\r\nimport { BsClipboard } from \"react-icons/bs\";\r\n\r\n\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"highlight.js/styles/xcode.css\";\r\nimport \"../css/json-markup.css\";\r\nimport \"../css/home.css\";\r\n\r\nexport default class Home extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    if (!global.localStorage) {\r\n      global.localStorage = new LocalStorage(\"./scratch\");\r\n    }\r\n\r\n    this.state = {\r\n      input_text: \"\",\r\n      output_text: \"\",\r\n    };\r\n\r\n    hljs.registerLanguage(\"json\", require(\"highlight.js/lib/languages/json\"));\r\n    if (localStorage.getItem(\"json\")) {\r\n      this.state.input_text = localStorage.getItem(\"json\");\r\n      this.parseJSON(this.state.input_text, true);\r\n    }\r\n  }\r\n\r\n  handleInputChange(event) {\r\n    let json = event.target.value;\r\n\r\n    this.setState({ output_text: \"\" });\r\n    this.setState({\r\n      input_text: json,\r\n    });\r\n\r\n    if (json.length <= 0) return;\r\n\r\n    this.parseJSON(json);\r\n  }\r\n\r\n  parseJSON(json, onInit = false) {\r\n    let parseData = JSONParser.parseAndBeautify(json);\r\n    if (parseData.success) {\r\n      localStorage.setItem(\"json\", parseData.rawOutput);\r\n    }\r\n    if (!onInit) {\r\n      this.setState({\r\n        output_text: parseData.success\r\n          ? hljs.highlight(\"json\", parseData.rawOutput).value\r\n          : parseData.htmlOutput,\r\n      });\r\n    } else {\r\n      // eslint-disable-next-line\r\n      this.state.output_text = parseData.success\r\n        ? hljs.highlight(\"json\", parseData.rawOutput).value\r\n        : parseData.htmlOutput;\r\n    }\r\n  }\r\n\r\n  setClipboard() {\r\n    let parseData = JSONParser.parseAndBeautify(this.state.input_text);\r\n    if (parseData.success) {\r\n      copy(parseData.rawOutput);\r\n      toast.success(\"Copied to clipboard!\", {\r\n        hideProgressBar: true,\r\n      });\r\n    } else {\r\n      toast.error(\r\n        \"Could not copy output due to format errors. Please fix your JSON text.\",\r\n        {\r\n          hideProgressBar: true,\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"container mx-auto h-full\">\r\n        <ToastContainer />\r\n        <div className=\"w-full p-2 h-full\">\r\n          <div className=\"text-center p-5\">\r\n            <h1>JSON Prettify Online</h1>\r\n            <p className=\"p-3\">\r\n              A simple lightweight online tool to prettify <b>JSON</b> text.{\" \"}\r\n              <br /> Simply paste your <b>JSON</b> text on the input to\r\n              prettify!\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"flex mb-4\">\r\n            <div className=\"w-1/2 p-2\">\r\n              <div className=\"py-2\">\r\n                <h1 className=\"p-1\">Input</h1>\r\n              </div>\r\n              <textarea\r\n                value={this.state.input_text}\r\n                placeholder=\"Paste your JSON text here to prettify\"\r\n                className=\"form-input shadow appearance-none border w-full rounded p-2 resize-none leading-tight focus:outline-none focus:shadow-outline\"\r\n                onChange={(event) => this.handleInputChange(event)}\r\n              >{this.state.input_text}</textarea>\r\n            </div>\r\n            <div className=\"w-1/2 p-2 h-full\">\r\n              <div className=\"flex justify-between py-2\">\r\n                <h1 className=\"p-1\">Output</h1>\r\n                <button\r\n                  onClick={() => this.setClipboard()}\r\n                  className=\"bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow\"\r\n                >\r\n                  <BsClipboard />\r\n                </button>\r\n              </div>\r\n              <pre\r\n                suppressContentEditableWarning=\"true\"\r\n                className=\"shadow p-3 w-full h-full rounded border code-output focus:outline-none focus:shadow-outline\"\r\n                contentEditable=\"true\"\r\n              >\r\n                {parse(this.state.output_text)}\r\n              </pre>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}